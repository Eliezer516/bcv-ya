{"id":"../node_modules/entities/lib/encode.js","dependencies":[{"name":"C:\\Users\\IRAIDA\\Desktop\\web-scraping\\package.json","includedInParent":true,"mtime":1637633329892},{"name":"C:\\Users\\IRAIDA\\Desktop\\web-scraping\\node_modules\\entities\\package.json","includedInParent":true,"mtime":1637633327874},{"name":"./maps/xml.json","loc":{"line":7,"column":41},"parent":"C:\\Users\\IRAIDA\\Desktop\\web-scraping\\node_modules\\entities\\lib\\encode.js","resolved":"C:\\Users\\IRAIDA\\Desktop\\web-scraping\\node_modules\\entities\\lib\\maps\\xml.json"},{"name":"./maps/entities.json","loc":{"line":18,"column":46},"parent":"C:\\Users\\IRAIDA\\Desktop\\web-scraping\\node_modules\\entities\\lib\\encode.js","resolved":"C:\\Users\\IRAIDA\\Desktop\\web-scraping\\node_modules\\entities\\lib\\maps\\entities.json"}],"generated":{"js":"\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.escapeUTF8 = exports.escape = exports.encodeNonAsciiHTML = exports.encodeHTML = exports.encodeXML = void 0;\nvar xml_json_1 = __importDefault(require(\"./maps/xml.json\"));\nvar inverseXML = getInverseObj(xml_json_1.default);\nvar xmlReplacer = getInverseReplacer(inverseXML);\n/**\n * Encodes all non-ASCII characters, as well as characters not valid in XML\n * documents using XML entities.\n *\n * If a character has no equivalent entity, a\n * numeric hexadecimal reference (eg. `&#xfc;`) will be used.\n */\nexports.encodeXML = getASCIIEncoder(inverseXML);\nvar entities_json_1 = __importDefault(require(\"./maps/entities.json\"));\nvar inverseHTML = getInverseObj(entities_json_1.default);\nvar htmlReplacer = getInverseReplacer(inverseHTML);\n/**\n * Encodes all entities and non-ASCII characters in the input.\n *\n * This includes characters that are valid ASCII characters in HTML documents.\n * For example `#` will be encoded as `&num;`. To get a more compact output,\n * consider using the `encodeNonAsciiHTML` function.\n *\n * If a character has no equivalent entity, a\n * numeric hexadecimal reference (eg. `&#xfc;`) will be used.\n */\nexports.encodeHTML = getInverse(inverseHTML, htmlReplacer);\n/**\n * Encodes all non-ASCII characters, as well as characters not valid in HTML\n * documents using HTML entities.\n *\n * If a character has no equivalent entity, a\n * numeric hexadecimal reference (eg. `&#xfc;`) will be used.\n */\nexports.encodeNonAsciiHTML = getASCIIEncoder(inverseHTML);\nfunction getInverseObj(obj) {\n    return Object.keys(obj)\n        .sort()\n        .reduce(function (inverse, name) {\n        inverse[obj[name]] = \"&\" + name + \";\";\n        return inverse;\n    }, {});\n}\nfunction getInverseReplacer(inverse) {\n    var single = [];\n    var multiple = [];\n    for (var _i = 0, _a = Object.keys(inverse); _i < _a.length; _i++) {\n        var k = _a[_i];\n        if (k.length === 1) {\n            // Add value to single array\n            single.push(\"\\\\\" + k);\n        }\n        else {\n            // Add value to multiple array\n            multiple.push(k);\n        }\n    }\n    // Add ranges to single characters.\n    single.sort();\n    for (var start = 0; start < single.length - 1; start++) {\n        // Find the end of a run of characters\n        var end = start;\n        while (end < single.length - 1 &&\n            single[end].charCodeAt(1) + 1 === single[end + 1].charCodeAt(1)) {\n            end += 1;\n        }\n        var count = 1 + end - start;\n        // We want to replace at least three characters\n        if (count < 3)\n            continue;\n        single.splice(start, count, single[start] + \"-\" + single[end]);\n    }\n    multiple.unshift(\"[\" + single.join(\"\") + \"]\");\n    return new RegExp(multiple.join(\"|\"), \"g\");\n}\n// /[^\\0-\\x7F]/gu\nvar reNonASCII = /(?:[\\x80-\\uD7FF\\uE000-\\uFFFF]|[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]|[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])|(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF])/g;\nvar getCodePoint = \n// eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\nString.prototype.codePointAt != null\n    ? // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        function (str) { return str.codePointAt(0); }\n    : // http://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae\n        function (c) {\n            return (c.charCodeAt(0) - 0xd800) * 0x400 +\n                c.charCodeAt(1) -\n                0xdc00 +\n                0x10000;\n        };\nfunction singleCharReplacer(c) {\n    return \"&#x\" + (c.length > 1 ? getCodePoint(c) : c.charCodeAt(0))\n        .toString(16)\n        .toUpperCase() + \";\";\n}\nfunction getInverse(inverse, re) {\n    return function (data) {\n        return data\n            .replace(re, function (name) { return inverse[name]; })\n            .replace(reNonASCII, singleCharReplacer);\n    };\n}\nvar reEscapeChars = new RegExp(xmlReplacer.source + \"|\" + reNonASCII.source, \"g\");\n/**\n * Encodes all non-ASCII characters, as well as characters not valid in XML\n * documents using numeric hexadecimal reference (eg. `&#xfc;`).\n *\n * Have a look at `escapeUTF8` if you want a more concise output at the expense\n * of reduced transportability.\n *\n * @param data String to escape.\n */\nfunction escape(data) {\n    return data.replace(reEscapeChars, singleCharReplacer);\n}\nexports.escape = escape;\n/**\n * Encodes all characters not valid in XML documents using numeric hexadecimal\n * reference (eg. `&#xfc;`).\n *\n * Note that the output will be character-set dependent.\n *\n * @param data String to escape.\n */\nfunction escapeUTF8(data) {\n    return data.replace(xmlReplacer, singleCharReplacer);\n}\nexports.escapeUTF8 = escapeUTF8;\nfunction getASCIIEncoder(obj) {\n    return function (data) {\n        return data.replace(reEscapeChars, function (c) { return obj[c] || singleCharReplacer(c); });\n    };\n}\n"},"sourceMaps":{"js":{"mappings":[{"source":"../node_modules/entities/lib/encode.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../node_modules/entities/lib/encode.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"../node_modules/entities/lib/encode.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"../node_modules/entities/lib/encode.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"../node_modules/entities/lib/encode.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"../node_modules/entities/lib/encode.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"../node_modules/entities/lib/encode.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"../node_modules/entities/lib/encode.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"../node_modules/entities/lib/encode.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"../node_modules/entities/lib/encode.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"../node_modules/entities/lib/encode.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"../node_modules/entities/lib/encode.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"../node_modules/entities/lib/encode.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"../node_modules/entities/lib/encode.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"../node_modules/entities/lib/encode.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"../node_modules/entities/lib/encode.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"../node_modules/entities/lib/encode.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"../node_modules/entities/lib/encode.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"../node_modules/entities/lib/encode.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"../node_modules/entities/lib/encode.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"../node_modules/entities/lib/encode.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"../node_modules/entities/lib/encode.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"../node_modules/entities/lib/encode.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"../node_modules/entities/lib/encode.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"../node_modules/entities/lib/encode.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"../node_modules/entities/lib/encode.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"../node_modules/entities/lib/encode.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"../node_modules/entities/lib/encode.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"../node_modules/entities/lib/encode.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"../node_modules/entities/lib/encode.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"../node_modules/entities/lib/encode.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"../node_modules/entities/lib/encode.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"../node_modules/entities/lib/encode.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"../node_modules/entities/lib/encode.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"../node_modules/entities/lib/encode.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"../node_modules/entities/lib/encode.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"../node_modules/entities/lib/encode.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"../node_modules/entities/lib/encode.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"../node_modules/entities/lib/encode.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"../node_modules/entities/lib/encode.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"../node_modules/entities/lib/encode.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"../node_modules/entities/lib/encode.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"../node_modules/entities/lib/encode.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"../node_modules/entities/lib/encode.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"../node_modules/entities/lib/encode.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"../node_modules/entities/lib/encode.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"../node_modules/entities/lib/encode.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"../node_modules/entities/lib/encode.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"../node_modules/entities/lib/encode.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"../node_modules/entities/lib/encode.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"../node_modules/entities/lib/encode.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"../node_modules/entities/lib/encode.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"../node_modules/entities/lib/encode.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"../node_modules/entities/lib/encode.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"../node_modules/entities/lib/encode.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"../node_modules/entities/lib/encode.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"../node_modules/entities/lib/encode.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"../node_modules/entities/lib/encode.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"../node_modules/entities/lib/encode.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"../node_modules/entities/lib/encode.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"../node_modules/entities/lib/encode.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"../node_modules/entities/lib/encode.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"../node_modules/entities/lib/encode.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"../node_modules/entities/lib/encode.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"../node_modules/entities/lib/encode.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"../node_modules/entities/lib/encode.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"../node_modules/entities/lib/encode.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"../node_modules/entities/lib/encode.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"../node_modules/entities/lib/encode.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"../node_modules/entities/lib/encode.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"../node_modules/entities/lib/encode.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"../node_modules/entities/lib/encode.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"../node_modules/entities/lib/encode.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"../node_modules/entities/lib/encode.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"../node_modules/entities/lib/encode.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"../node_modules/entities/lib/encode.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"../node_modules/entities/lib/encode.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"../node_modules/entities/lib/encode.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"../node_modules/entities/lib/encode.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"../node_modules/entities/lib/encode.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"../node_modules/entities/lib/encode.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"../node_modules/entities/lib/encode.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"../node_modules/entities/lib/encode.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"../node_modules/entities/lib/encode.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"../node_modules/entities/lib/encode.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"../node_modules/entities/lib/encode.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"../node_modules/entities/lib/encode.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"../node_modules/entities/lib/encode.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"../node_modules/entities/lib/encode.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"../node_modules/entities/lib/encode.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"../node_modules/entities/lib/encode.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"../node_modules/entities/lib/encode.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"../node_modules/entities/lib/encode.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"../node_modules/entities/lib/encode.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"../node_modules/entities/lib/encode.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"../node_modules/entities/lib/encode.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"../node_modules/entities/lib/encode.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"../node_modules/entities/lib/encode.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"../node_modules/entities/lib/encode.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"../node_modules/entities/lib/encode.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"../node_modules/entities/lib/encode.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"../node_modules/entities/lib/encode.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"../node_modules/entities/lib/encode.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"../node_modules/entities/lib/encode.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"../node_modules/entities/lib/encode.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"../node_modules/entities/lib/encode.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"../node_modules/entities/lib/encode.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"../node_modules/entities/lib/encode.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"../node_modules/entities/lib/encode.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"../node_modules/entities/lib/encode.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}},{"source":"../node_modules/entities/lib/encode.js","original":{"line":111,"column":0},"generated":{"line":111,"column":0}},{"source":"../node_modules/entities/lib/encode.js","original":{"line":112,"column":0},"generated":{"line":112,"column":0}},{"source":"../node_modules/entities/lib/encode.js","original":{"line":113,"column":0},"generated":{"line":113,"column":0}},{"source":"../node_modules/entities/lib/encode.js","original":{"line":114,"column":0},"generated":{"line":114,"column":0}},{"source":"../node_modules/entities/lib/encode.js","original":{"line":115,"column":0},"generated":{"line":115,"column":0}},{"source":"../node_modules/entities/lib/encode.js","original":{"line":116,"column":0},"generated":{"line":116,"column":0}},{"source":"../node_modules/entities/lib/encode.js","original":{"line":117,"column":0},"generated":{"line":117,"column":0}},{"source":"../node_modules/entities/lib/encode.js","original":{"line":118,"column":0},"generated":{"line":118,"column":0}},{"source":"../node_modules/entities/lib/encode.js","original":{"line":119,"column":0},"generated":{"line":119,"column":0}},{"source":"../node_modules/entities/lib/encode.js","original":{"line":120,"column":0},"generated":{"line":120,"column":0}},{"source":"../node_modules/entities/lib/encode.js","original":{"line":121,"column":0},"generated":{"line":121,"column":0}},{"source":"../node_modules/entities/lib/encode.js","original":{"line":122,"column":0},"generated":{"line":122,"column":0}},{"source":"../node_modules/entities/lib/encode.js","original":{"line":123,"column":0},"generated":{"line":123,"column":0}},{"source":"../node_modules/entities/lib/encode.js","original":{"line":124,"column":0},"generated":{"line":124,"column":0}},{"source":"../node_modules/entities/lib/encode.js","original":{"line":125,"column":0},"generated":{"line":125,"column":0}},{"source":"../node_modules/entities/lib/encode.js","original":{"line":126,"column":0},"generated":{"line":126,"column":0}},{"source":"../node_modules/entities/lib/encode.js","original":{"line":127,"column":0},"generated":{"line":127,"column":0}},{"source":"../node_modules/entities/lib/encode.js","original":{"line":128,"column":0},"generated":{"line":128,"column":0}},{"source":"../node_modules/entities/lib/encode.js","original":{"line":129,"column":0},"generated":{"line":129,"column":0}},{"source":"../node_modules/entities/lib/encode.js","original":{"line":130,"column":0},"generated":{"line":130,"column":0}},{"source":"../node_modules/entities/lib/encode.js","original":{"line":131,"column":0},"generated":{"line":131,"column":0}},{"source":"../node_modules/entities/lib/encode.js","original":{"line":132,"column":0},"generated":{"line":132,"column":0}},{"source":"../node_modules/entities/lib/encode.js","original":{"line":133,"column":0},"generated":{"line":133,"column":0}},{"source":"../node_modules/entities/lib/encode.js","original":{"line":134,"column":0},"generated":{"line":134,"column":0}},{"source":"../node_modules/entities/lib/encode.js","original":{"line":135,"column":0},"generated":{"line":135,"column":0}},{"source":"../node_modules/entities/lib/encode.js","original":{"line":136,"column":0},"generated":{"line":136,"column":0}},{"source":"../node_modules/entities/lib/encode.js","original":{"line":137,"column":0},"generated":{"line":137,"column":0}}],"sources":{"../node_modules/entities/lib/encode.js":"\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.escapeUTF8 = exports.escape = exports.encodeNonAsciiHTML = exports.encodeHTML = exports.encodeXML = void 0;\nvar xml_json_1 = __importDefault(require(\"./maps/xml.json\"));\nvar inverseXML = getInverseObj(xml_json_1.default);\nvar xmlReplacer = getInverseReplacer(inverseXML);\n/**\n * Encodes all non-ASCII characters, as well as characters not valid in XML\n * documents using XML entities.\n *\n * If a character has no equivalent entity, a\n * numeric hexadecimal reference (eg. `&#xfc;`) will be used.\n */\nexports.encodeXML = getASCIIEncoder(inverseXML);\nvar entities_json_1 = __importDefault(require(\"./maps/entities.json\"));\nvar inverseHTML = getInverseObj(entities_json_1.default);\nvar htmlReplacer = getInverseReplacer(inverseHTML);\n/**\n * Encodes all entities and non-ASCII characters in the input.\n *\n * This includes characters that are valid ASCII characters in HTML documents.\n * For example `#` will be encoded as `&num;`. To get a more compact output,\n * consider using the `encodeNonAsciiHTML` function.\n *\n * If a character has no equivalent entity, a\n * numeric hexadecimal reference (eg. `&#xfc;`) will be used.\n */\nexports.encodeHTML = getInverse(inverseHTML, htmlReplacer);\n/**\n * Encodes all non-ASCII characters, as well as characters not valid in HTML\n * documents using HTML entities.\n *\n * If a character has no equivalent entity, a\n * numeric hexadecimal reference (eg. `&#xfc;`) will be used.\n */\nexports.encodeNonAsciiHTML = getASCIIEncoder(inverseHTML);\nfunction getInverseObj(obj) {\n    return Object.keys(obj)\n        .sort()\n        .reduce(function (inverse, name) {\n        inverse[obj[name]] = \"&\" + name + \";\";\n        return inverse;\n    }, {});\n}\nfunction getInverseReplacer(inverse) {\n    var single = [];\n    var multiple = [];\n    for (var _i = 0, _a = Object.keys(inverse); _i < _a.length; _i++) {\n        var k = _a[_i];\n        if (k.length === 1) {\n            // Add value to single array\n            single.push(\"\\\\\" + k);\n        }\n        else {\n            // Add value to multiple array\n            multiple.push(k);\n        }\n    }\n    // Add ranges to single characters.\n    single.sort();\n    for (var start = 0; start < single.length - 1; start++) {\n        // Find the end of a run of characters\n        var end = start;\n        while (end < single.length - 1 &&\n            single[end].charCodeAt(1) + 1 === single[end + 1].charCodeAt(1)) {\n            end += 1;\n        }\n        var count = 1 + end - start;\n        // We want to replace at least three characters\n        if (count < 3)\n            continue;\n        single.splice(start, count, single[start] + \"-\" + single[end]);\n    }\n    multiple.unshift(\"[\" + single.join(\"\") + \"]\");\n    return new RegExp(multiple.join(\"|\"), \"g\");\n}\n// /[^\\0-\\x7F]/gu\nvar reNonASCII = /(?:[\\x80-\\uD7FF\\uE000-\\uFFFF]|[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]|[\\uD800-\\uDBFF](?![\\uDC00-\\uDFFF])|(?:[^\\uD800-\\uDBFF]|^)[\\uDC00-\\uDFFF])/g;\nvar getCodePoint = \n// eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\nString.prototype.codePointAt != null\n    ? // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        function (str) { return str.codePointAt(0); }\n    : // http://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae\n        function (c) {\n            return (c.charCodeAt(0) - 0xd800) * 0x400 +\n                c.charCodeAt(1) -\n                0xdc00 +\n                0x10000;\n        };\nfunction singleCharReplacer(c) {\n    return \"&#x\" + (c.length > 1 ? getCodePoint(c) : c.charCodeAt(0))\n        .toString(16)\n        .toUpperCase() + \";\";\n}\nfunction getInverse(inverse, re) {\n    return function (data) {\n        return data\n            .replace(re, function (name) { return inverse[name]; })\n            .replace(reNonASCII, singleCharReplacer);\n    };\n}\nvar reEscapeChars = new RegExp(xmlReplacer.source + \"|\" + reNonASCII.source, \"g\");\n/**\n * Encodes all non-ASCII characters, as well as characters not valid in XML\n * documents using numeric hexadecimal reference (eg. `&#xfc;`).\n *\n * Have a look at `escapeUTF8` if you want a more concise output at the expense\n * of reduced transportability.\n *\n * @param data String to escape.\n */\nfunction escape(data) {\n    return data.replace(reEscapeChars, singleCharReplacer);\n}\nexports.escape = escape;\n/**\n * Encodes all characters not valid in XML documents using numeric hexadecimal\n * reference (eg. `&#xfc;`).\n *\n * Note that the output will be character-set dependent.\n *\n * @param data String to escape.\n */\nfunction escapeUTF8(data) {\n    return data.replace(xmlReplacer, singleCharReplacer);\n}\nexports.escapeUTF8 = escapeUTF8;\nfunction getASCIIEncoder(obj) {\n    return function (data) {\n        return data.replace(reEscapeChars, function (c) { return obj[c] || singleCharReplacer(c); });\n    };\n}\n"},"lineCount":137}},"error":null,"hash":"fb56df9ae962aec2c5f3adb2ae21464d","cacheData":{"env":{}}}